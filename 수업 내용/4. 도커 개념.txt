[ 도커 ]
애플리케이션 실행에 필요한 환경을 하나의 이미지로 묶어서 만들어 두고
해당 이미지를 이용해서 컨테이너를 만들어 애플리케이션을 실행하는 방식
-> 코드, 런타임, 시스템 도구, 라이브러리 등

* wsl(windows subsystem for linux, 윈도우 상에서 리눅스를 사용할 수 있도록 도와주는 도구)을 통해
리눅스를 사용할 수 있게 만들어서 도커 프로그램을 설치하여 사용한다.

* 도커를 삭제할땐, 컨테이너를 먼저 삭제 한 뒤, 참조하는 이미지를 삭제한다.

* $ : 변수
* $() : 해당 명령을 먼저 실행하고, 그 결과 값을 사용

1. 기존 방식 vs 도커 방식
1) 기존 방식   2) 도커 방식
mysql 설치    mysql 이미지 준비
mysql 실행    mysql 컨테이너 만들어 실행 = 프로그램 실행

2. 도커의 장점
1) 격리 환경 제공 - 독립된 실행 환경을 제공 (컨테이너 기반의 오픈 소스 가상 플랫폼)
2) 애플리케이션을 신속하게 실행 (구축, 테스트, 배포하는 과정)

3. 도커의 컴포넌트
1) Docker Engine
- Docker Image 생성
- Docker Container 생성
- Docker 명령어 실행
- Dockerfile을 이용한 Docker Image 생성

2) Docker Registry
- Docker Image 공개 및 공유
- Docker Image 공유 서비스(각종 Docker Image 들이 공개되어있는 사이트) : Docker Hub

3) Docker Compose
- 애플리케이션 실행 환경을 구성하는 Container를 관리하기 위한 툴
- 여러 container의 구성 정보를 YAML 형식으로 정의
  
4) Docker Swarm
- Docker Host들을 클러스터로 구축해서 관리할 수 있는 오케스트레이션 도구
- 쿠버네티스가 사실상 Docker Swarm을 대체하였음

* 클러스터   : 컨테이너 형태의 애플리케이션을 호스팅하는 노드들로 이루어진 집합
* 쿠버네티스 : 애플리케이션이 구동되는 환경을 감싸 실행할 수 있도록 하는 격리 기술 
쿠버네티스를 배포하면 클러스터를 얻는다. (쿠버네티스 실행 = 클러스터 실행)
* 오케스트레이션 : 여러 서버에 걸친 컨테이너 및 사용하는 환경 설정을 관리하는 행위
* 한개의 컨테이너를 구동시킬때는 도커 사용,
다수의 컨테이너를 구동하여 환경을 관리 및 조율할 때는 쿠버네티스를 사용한다.

4. Docker 동작 구조
1) Image를 내려 받는 경우
Docker Hub > Image pull > Create Container > Run Container
                  --------------------------------------------------- > Docker Engine이 담당
도커허브에서  이미지 내려 받고  컨테이너를 만들어  실행 

2) Image를 만드는 경우
Dockerfile > Make Image > Create Container > Run Container
------------------------------------------------------------------- > Docker Engine이 담당
도커파일에서 이미지를 만들고 컨테이너를 만들어 실행

5. Docker 활용
1) Docker Image는 하나만 있으면 된다. (애플리케이션 당)
2) Docker Container는 여러 개를 만들 수 있다.
3) Docker Container는 일회용이다.
4) 기능 추가나 변경이 필요하면 Container를 수정하지 않고, Image를 수정한 뒤 Container를 다시 만든다.

6. docker image, container 리스트 확인 방법
$ docker system df -v : 도커 전체 내용 확인
$ docker image ls : 도커 이미지 리스트 출력
$ docker container ls : 도커 컨테이너 리스트 출력 (실행 중인 컨테이너만 확인)
$ docker system df | grep -i 'container' : 전체 내용 중 'container'만 출력

7. disk mount
호스트 컴퓨터의 디렉터리를 컨테이너 파일 시스템의 디렉터리로 연결하는 기능
양뱡향 접근 및 수정이 가능 (호스트 디렉터리, 컨테이너 디렉터리 연결 시스템)

$ docker info | grep -i 'docker root dir'
Docker Root Dir : /var/lib/docker 
루트 디렉터리 내용 출력 > /var/lib/docker 디렉터리를 서버의 별도 하드 디스크에 마운트하여 사용하기를 권장 (용량 이슈)